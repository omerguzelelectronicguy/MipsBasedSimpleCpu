`timescale 1ns / 1ps
module instruction_mem(adr,icode);
input [15:0]adr;
output [15:0]icode;

reg[15:0]ROM0[63:0];
initial begin
// Test of ALU operations //
ROM0[0] = 16'b1101000000000000 ;   //MOVI     // this line is first instruction that cannot be used
/////////////////////////////////////////     The second intruction order.////////////////
ROM0[1] = 16'b1101000000000001;     //MOVI
ROM0[2] = 16'b0101000000000010;     //ADDI
ROM0[3] = 16'b1001000000000011;     //SUBI
ROM0[4] = 16'b1101000100000010;     //MOVI // R0 = 0    R1 = 2 
ROM0[5] = 16'b0000000011010001;     //MOV
ROM0[6] = 16'b0010000000000011;     //ORI
ROM0[7] = 16'b0001000000000010;     //ANDI
ROM0[8] = 16'b0011000000001110;     //XORI
ROM0[9] = 16'b1101000100000110;     //MOVI
ROM0[10] = 16'b0000000000100001;    //OR
ROM0[11] = 16'b1101000100000001;    //MOVI
ROM0[12] = 16'b0000000000110001;	//XOR
ROM0[13] = 16'b0001000000000100;	//ANDI
ROM0[14] = 16'b1000000001000001;	//SUBI
ROM0[15] = 16'b0000000000010001;   	//AND
ROM0[16] = 16'b1101000100000001;	//MOVI
ROM0[17] = 16'b1101000000000100;	//MOVI
ROM0[18] = 16'b1000000000011111;	//SUBI
ROM0[19] = 16'b1101000100001001;	//MOVI
ROM0[20] = 16'b0000000011010001;	//MOV
ROM0[21] = 16'b1101000100000010;	//MOVI
ROM0[22] = 16'b0000000010010001;	//SUB
ROM0[23] = 16'b1101000100001010;	//MOVI 
ROM0[24] = 16'b1101001000000000;	//MOVI
ROM0[25] = 16'b0100000101000010;	//STOR     /////////
ROM0[26] = 16'b0100000000000010;	//LOAD     /////////
ROM0[27] = 16'b1011000000001010;	//MOVI
ROM0[28] = 16'b0000000010110001;	//CMP      //////
ROM0[29] = 16'b1100000000001101;	//BCOND -> eq 13 INCREMENT
ROM0[30] = 16'b0000000000100000;	//OR
ROM0[31] = 16'b1101000000000000;	//MOVI
ROM0[32] = 16'b1101000100000001;	//MOVI
ROM0[33] = 16'b1101001000000010;	//MOVI
ROM0[34] = 16'b1101001100000011;	//MOVI
ROM0[35] = 16'b1101010000000100;	//MOVI
ROM0[36] = 16'b1101010100000101;	//MOVI
ROM0[37] = 16'b1101011000000110;	//MOVI
ROM0[38] = 16'b1101011100000111;	//MOVI
ROM0[39] = 16'b1101100000001000;	//MOVI
ROM0[40] = 16'b1101100100001001;	//MOVI
ROM0[41] = 16'b1101000000001011;	//MOVI
ROM0[42] = 16'b1101000000001100;	//MOVI     ///jumped
ROM0[43] = 16'b1101000000001101;	//MOVI
ROM0[44] = 16'b1101000000001110;	//MOVI
ROM0[45] = 16'b1101000000001111;	//MOVI

/*
/////////////////////////////////////////    The First intruction order.////////////////
ROM0[1] = 16'b1101000000000000 ;   //MOVI
ROM0[2] = 16'b0101000000000001 ;   //ADDI
ROM0[3] = 16'b1001000000000001 ;   //subI
ROM0[4] = 16'b1101000100000010 ;   //MOVI
ROM0[5] = 16'b0000000011010001 ;   //MOV
ROM0[6] = 16'b0010000000000011 ;   //ORI
ROM0[7] = 16'b0001000000000010 ;   //ANDI
ROM0[8] = 16'b0011000000000111 ;   //XORI
ROM0[9] = 16'b1101000100000110 ;   //MOVI
ROM0[10] = 16'b0000000000100001 ;
ROM0[11] = 16'b1101000100000001;
ROM0[12] = 16'b0000000000110001;
ROM0[13] = 16'b0001000000000100;
ROM0[14] = 16'b1000000000000001;
ROM0[15] = 16'b0000000000010001;
ROM0[16] = 16'b1101000100000001;
ROM0[17] = 16'b1101000000000100;
ROM0[18] = 16'b1000000001000001;
ROM0[19] = 16'b1101000100001001;
ROM0[20] = 16'b0000000011010001;
ROM0[21] = 16'b1101000100000010;
ROM0[22] = 16'b0000000010010001;
ROM0[23] = 16'b1101000100001010;
ROM0[24] = 16'b1101001000000000;
ROM0[25] = 16'b0100000101000010;
ROM0[26] = 16'b0100000000000010;
ROM0[27] = 16'b1011000000001010;
ROM0[28] = 16'b0000000010110001;
ROM0[29] = 16'b1100000000001011;
ROM0[30] = 16'b0000000000100000;
ROM0[31] = 16'b1101000000000000;
ROM0[32] = 16'b1101000100000001;
ROM0[33] = 16'b1101001000000010;
ROM0[34] = 16'b1101001100000011;
ROM0[35] = 16'b1101010000000100;
ROM0[36] = 16'b1101010100000101;
ROM0[37] = 16'b1101011000000110;
ROM0[38] = 16'b1101011100000111;
ROM0[39] = 16'b1101100000001000;
ROM0[40] = 16'b1101100100001001;
ROM0[41] = 16'b1101000000001011;
ROM0[42] = 16'b1101000000001100;
ROM0[43] = 16'b1101000000001101;
ROM0[44] = 16'b1101000000001110;
ROM0[45] = 16'b1101000000001111;
*/
/*
///////////////////////////////////////////// The instructions that I created. ///////
// note: it may include wrong explaination.
// Test of shift operations. //LSHI hex(01) R0 13  1000 0000 0000 0001
ROM0[1] = 16'b1000000000000010  ;   //LSHI
ROM0[2] = 16'b1000000000010011  ;   //LSHI
ROM0[3] = 16'b1000000001000010  ;   //LSH
ROM0[4] = 16'b1000000001010001  ;   //LSH
// Shift operations work correctly.
// 
ROM0[5]  = 16'b1101000000001111  ;   //MOVI 
ROM0[6] = 16'b0100011110001110  ;   //JAL //change the number if you want to check it.
//JAL is working it jumps these three codes.
ROM0[7] = 16'b0000000010110001  ;   //CMP
ROM0[8] = 16'b1100000000001000  ;   //Bcond
ROM0[9] = 16'b0100000011000001  ;   //JCond
//Before Jcond and Bcond it must be a compare.
ROM0[10] = 16'b0000000010110001  ;   //CMP
ROM0[11] = 16'b1100000000000011  ;   //Bcond
ROM0[12] = 16'b0100000011000001  ;   //JCond // these two will be ignored
ROM0[13] = 16'b0100000011000001  ;   //JCond // these two will be ignored
ROM0[14] = 16'b0000000010110001  ;   //CMP
ROM0[15] = 16'b0100000011000100  ;   //JCond
ROM0[16] = 16'b0000000011010001  ;   //MOV

// Comparing the numbers here
ROM0[17] = 16'b0000000010110000  ;   //CMP
ROM0[18] = 16'b0000000010110001  ;   //CMP
ROM0[19] = 16'b1011000000000011  ;   //CMPI
ROM0[20] = 16'b1011000000000100  ;   //CMPI
ROM0[21] = 16'b1011000000000101  ;   //CMPI
//
ROM0[22] = 16'b0100000001000011  ;   //STORE
ROM0[23] = 16'b0100001100000011  ;   //LOAD
*/

end
assign icode = ROM0[adr];

endmodule